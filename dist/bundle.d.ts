// Generated by dts-bundle-generator v9.4.0

import { TEnhancer, TPlugin } from 'fela';
import { AnyFunc } from 'pepka';

export declare const css: (strings: (string[] | TemplateStringsArray), ...values: any[]) => any;
export declare const __specialcss: (strings: (string[] | TemplateStringsArray), ...values: any[]) => any;
export interface AnyObject {
	[key: string]: any;
}
export type ModifierCondition = (className: string, context: AnyObject) => boolean;
export interface Modifiers {
	[name: string]: ModifierCondition;
}
export interface Options {
	method: string;
	defStyles: ((vm: AnyObject) => AnyObject) | {
		key: string;
		value: ((vm?: AnyObject) => AnyObject);
	};
	modifiers: {
		[name: string]: ModifierCondition;
	};
	preset: {
		unit: [
			string,
			AnyObject
		] | [
		];
	};
	plugins: TPlugin[];
	enhancers: TEnhancer[];
	ssr: boolean;
}
export type RenderClasses = (base: AnyObject | string | null, propsOrRule?: any, props?: AnyObject, modifiers?: Modifiers) => string;
export declare class Renderer {
	/** To use with fela-monolithic enhancer. */
	static devClassNames: boolean;
	private renderer;
	private _mixin;
	private renderClasses;
	/** Vue Composition API endpoint. */
	styl: (stylesheet: AnyObject, modifiers?: Modifiers) => RenderClasses;
	/** @returns Vue Options API mixin. */
	get mixin(): AnyObject;
	/** @returns Entire css for SSR proposes. */
	get style(): string;
	/** Sets classes to DOM elements what match. Just like CSS. */
	setClasses: (this: Renderer, sheet: import("pepka").AnyObject, root?: NodeList) => void;
	constructor(opts?: Partial<Options>);
}
export declare class SvelteRenderer extends Renderer {
	static get devClassNames(): boolean;
	/** To use with fela-monolithic enhancer. */
	static set devClassNames(x: boolean);
	private f;
	private fdef;
	getCSS(): (rules: AnyObject) => (className: string | AnyObject | AnyFunc, attrs?: AnyObject) => any;
	getLiteralCSS(): (template_0: string[]) => (className: string | AnyFunc | AnyObject, attrs?: AnyObject) => any;
	constructor(opts?: Partial<Options>);
}
export declare const setCompression: (to: boolean) => boolean;
export declare const rollupCSSCompression: () => {
	name: string;
	transform(code: string): Promise<{
		code: string;
		map: any;
	}>;
};

export {};
